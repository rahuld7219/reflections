What happens when you initialize a repository? Why do you need to do it?
		a hidden folder(.git=>a git repository for the current folder) will be created, 
		which will contains metadata about the history of the repository since its creation.
		we need to do it so that we can track the history of our files in the working directory(i.e directory for which the repository is created).

How is the staging area different from the working directory and the repository?
What value do you think it offers?
		It's a midway area between working directory and repository, we add files in staging area before it can be commited to put in the repository.
		we can track history of only those files which we want(rather than all), 
		and also later we can revert back some files from staging area if we don't want to keep track of it.
		i.e., only those files which are in staging area will be keep tracked and we can add or remove files from staging area at our will.

How can you use the staging area to make sure you have one commit per logical
change?
	after one logical change by adding file to staging area and commiting it.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	when we want to test some new feature or want to make a different version for our application then we can branch out to a new path 
	without disturbing the current version.

How do the diagrams help you visualize the branch structure?
	helps me to understand entire structure of the commit history and also the branches created and what commits are made in each branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
